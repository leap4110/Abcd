/* PROC SUMMARY METHOD - MOST EFFICIENT FOR BIG DATA */

/* Step 1: Import Excel file containing support item mappings */
proc import datafile="path/to/your/support_item_mapping.xlsx"
    out=support_item_temp
    dbms=xlsx
    replace;
    sheet="Sheet1";
    getnames=yes;
    datarow=2;
run;

/* Step 2: Create service type lookup table */
data support_item_service_type_lookup;
    set support_item_temp;
    rename support_line_item = support_item_number;
    length service_type_registration_group_name $50;
    
    /* Priority 1: Check ABC column for 'SIL' text first */
    if index(upcase(ABC), 'SIL') > 0 then
        service_type_registration_group_name = 'SIL';
    
    /* Priority 2: Use support item patterns */
    else if index(support_line_item, '01_') = 1 and index(support_line_item, '_0115_1_1') > 0 then
        service_type_registration_group_name = 'SIL';
    else if index(support_line_item, '01_') = 1 and index(support_line_item, '_0107_1_1') > 0 then
        service_type_registration_group_name = 'Personal Care';
    else if index(support_line_item, '01_') = 1 and index(support_line_item, '_0104_1_1') > 0 then
        service_type_registration_group_name = 'Community Participation';
    else if index(support_line_item, '15_') = 1 and index(support_line_item, '_0125_6_1') > 0 then
        service_type_registration_group_name = 'Therapeutic Support - OT';
    else if index(support_line_item, '15_') = 1 and index(support_line_item, '_0128_6_1') > 0 then
        service_type_registration_group_name = 'Therapeutic Support - Other';
    else if index(support_line_item, '03_') = 1 and index(support_line_item, '_0116_2_1') > 0 then
        service_type_registration_group_name = 'Capital';
    else service_type_registration_group_name = 'Other';
run;

/* Step 3: Get registered quarter using PROC SUMMARY - fastest aggregation method */
proc summary data=your_source_table nway;
    class abn;
    var quarter;
    output out=abn_registered_quarter(drop=_type_ _freq_) min=registered_quarter;
    where registration_status in ('Active', 'Registered', 'Current');
run;

/* Step 4: Single-step aggregation with conditional sums - MOST EFFICIENT */
proc sql;
    create table table1_provider_payment_breakdown as
    select 
        p.abn,
        p.legal_name as "Legal Name",
        p.registration_status as "Registration Status",
        r.registered_quarter as "Registered Quarter",
        p.entity_type as "Entity Type",
        coalesce(s.service_type_registration_group_name, 'Unknown') as "Service Type (Registration Group Name)",
        sum(case when p.quarter = 'Mar-22' then p.payment_amount else 0 end) as "Mar-22",
        sum(case when p.quarter = 'Jun-22' then p.payment_amount else 0 end) as "Jun-22",
        sum(case when p.quarter = 'Sep-22' then p.payment_amount else 0 end) as "Sep-22",
        sum(case when p.quarter = 'Dec-22' then p.payment_amount else 0 end) as "Dec-22",
        sum(case when p.quarter = 'Mar-23' then p.payment_amount else 0 end) as "Mar-23",
        sum(case when p.quarter = 'Jun-23' then p.payment_amount else 0 end) as "Jun-23"
    from your_source_table p
    left join abn_registered_quarter r on p.abn = r.abn
    left join support_item_service_type_lookup s on p.support_item_number = s.support_item_number
    where p.payment_amount is not null
    group by p.abn, p.legal_name, p.registration_status, r.registered_quarter, 
             p.entity_type, calculated "Service Type (Registration Group Name)"
    order by p.abn, calculated "Service Type (Registration Group Name)";
quit;

/* Optional: Display results */
proc print data=table1_provider_payment_breakdown(obs=10) noobs;
    title "Provider Payment Breakdown - First 10 Records";
run;
