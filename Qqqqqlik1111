/*------------------------------------------------------------------------------------------------------------------------
/*  NDIS DATA MODEL VALIDATION TEST CASES
/*  
/*  These test cases will help identify data accuracy issues in groupings and percentages
/*  Focus on payment counts, participant counts, and dimensional breakdowns
/* 
-------------------------------------------------------------------------------------------------------------------------*/

/* Set the quarter for testing - change as needed */
%LET TEST_QTR = _2425_Q4;

/*------------------------------------------------------------------------------------------------------------------------
TEST 1: OVERALL DATA COMPLETENESS CHECK
-------------------------------------------------------------------------------------------------------------------------*/

TITLE "TEST 1: Data Completeness Overview";

/* Count records in each table */
PROC SQL;
CREATE TABLE TEST1_RECORD_COUNTS AS
SELECT 
    'MASTER_TABLE' AS TABLE_NAME,
    COUNT(*) AS RECORD_COUNT,
    COUNT(DISTINCT PROVIDER_KEY) AS UNIQUE_PROVIDERS,
    COUNT(DISTINCT PARTICIPANT_KEY) AS UNIQUE_PARTICIPANTS,
    COUNT(DISTINCT PAYMENT_KEY) AS UNIQUE_PAYMENTS
FROM OUTPRVAP.MASTER_TABLE&TEST_QTR.

UNION ALL

SELECT 
    'PRV_BRIDGE' AS TABLE_NAME,
    COUNT(*) AS RECORD_COUNT,
    COUNT(DISTINCT PROVIDER_KEY) AS UNIQUE_PROVIDERS,
    COUNT(DISTINCT PARTICIPANT_KEY) AS UNIQUE_PARTICIPANTS,
    COUNT(DISTINCT PAYMENT_KEY) AS UNIQUE_PAYMENTS
FROM WORK.PRV_BRIDGE&TEST_QTR.

UNION ALL

SELECT 
    'DIM_PAYMENT' AS TABLE_NAME,
    COUNT(*) AS RECORD_COUNT,
    COUNT(DISTINCT PROVIDER_KEY) AS UNIQUE_PROVIDERS,
    COUNT(DISTINCT PARTICIPANT_KEY) AS UNIQUE_PARTICIPANTS,
    COUNT(DISTINCT PAYMENT_KEY) AS UNIQUE_PAYMENTS
FROM WORK.PRV_DIM_PAYMENT&TEST_QTR.;
QUIT;

PROC PRINT DATA=TEST1_RECORD_COUNTS;
RUN;

/*------------------------------------------------------------------------------------------------------------------------
TEST 2: ORPHANED RECORDS CHECK - Keys that don't match between tables
-------------------------------------------------------------------------------------------------------------------------*/

TITLE "TEST 2: Orphaned Records Analysis";

/* Check for payments without matching participants */
PROC SQL;
CREATE TABLE TEST2_ORPHANED_PARTICIPANTS AS
SELECT 
    'PAYMENTS_WITHOUT_PARTICIPANTS' AS ISSUE_TYPE,
    COUNT(*) AS RECORD_COUNT,
    SUM(SUPP_DEL_COST) AS TOTAL_COST,
    COUNT(*) / (SELECT COUNT(*) FROM WORK.PRV_BRIDGE&TEST_QTR.) * 100 AS PCT_OF_TOTAL
FROM WORK.PRV_BRIDGE&TEST_QTR. b
LEFT JOIN OUTPRVAP.ALL_PTC&TEST_QTR. p 
    ON b.PARTICIPANT_KEY = p.PARTICIPANT_KEY
WHERE p.PARTICIPANT_KEY IS NULL

UNION ALL

/* Check for payments without matching providers */
SELECT 
    'PAYMENTS_WITHOUT_PROVIDERS' AS ISSUE_TYPE,
    COUNT(*) AS RECORD_COUNT,
    SUM(dp.SUPP_DEL_COST) AS TOTAL_COST,
    COUNT(*) / (SELECT COUNT(*) FROM WORK.PRV_BRIDGE&TEST_QTR.) * 100 AS PCT_OF_TOTAL
FROM WORK.PRV_BRIDGE&TEST_QTR. b
LEFT JOIN OUTPRVAP.ALL_PRV&TEST_QTR. pr 
    ON b.PROVIDER_KEY = pr.PROVIDER_KEY
LEFT JOIN WORK.PRV_DIM_PAYMENT&TEST_QTR. dp
    ON b.PAYMENT_KEY = dp.PAYMENT_KEY
WHERE pr.PROVIDER_KEY IS NULL;
QUIT;

PROC PRINT DATA=TEST2_ORPHANED_PARTICIPANTS;
RUN;

/*------------------------------------------------------------------------------------------------------------------------
TEST 3: AGE GROUP BREAKDOWN VALIDATION
-------------------------------------------------------------------------------------------------------------------------*/

TITLE "TEST 3: Age Group Analysis - Payment and Participant Counts";

/* Detailed age group breakdown */
PROC SQL;
CREATE TABLE TEST3_AGE_BREAKDOWN AS
SELECT 
    COALESCE(p.AGE_GROUP, 'MISSING/NULL') AS AGE_GROUP,
    COUNT(DISTINCT b.PARTICIPANT_KEY) AS UNIQUE_PARTICIPANTS,
    COUNT(b.PAYMENT_KEY) AS TOTAL_PAYMENTS,
    SUM(dp.SUPP_DEL_COST) AS TOTAL_COST,
    /* Calculate percentages */
    COUNT(DISTINCT b.PARTICIPANT_KEY) / (SELECT COUNT(DISTINCT PARTICIPANT_KEY) FROM WORK.PRV_BRIDGE&TEST_QTR.) * 100 AS PCT_PARTICIPANTS,
    COUNT(b.PAYMENT_KEY) / (SELECT COUNT(*) FROM WORK.PRV_BRIDGE&TEST_QTR.) * 100 AS PCT_PAYMENTS,
    SUM(dp.SUPP_DEL_COST) / (SELECT SUM(SUPP_DEL_COST) FROM WORK.PRV_DIM_PAYMENT&TEST_QTR.) * 100 AS PCT_COST
FROM WORK.PRV_BRIDGE&TEST_QTR. b
LEFT JOIN OUTPRVAP.ALL_PTC&TEST_QTR. p 
    ON b.PARTICIPANT_KEY = p.PARTICIPANT_KEY
LEFT JOIN WORK.PRV_DIM_PAYMENT&TEST_QTR. dp
    ON b.PAYMENT_KEY = dp.PAYMENT_KEY
GROUP BY CALCULATED AGE_GROUP
ORDER BY CALCULATED AGE_GROUP;
QUIT;

PROC PRINT DATA=TEST3_AGE_BREAKDOWN;
    VAR AGE_GROUP UNIQUE_PARTICIPANTS TOTAL_PAYMENTS TOTAL_COST PCT_PARTICIPANTS PCT_PAYMENTS PCT_COST;
    FORMAT PCT_PARTICIPANTS PCT_PAYMENTS PCT_COST 8.2;
    SUM UNIQUE_PARTICIPANTS TOTAL_PAYMENTS PCT_PARTICIPANTS PCT_PAYMENTS PCT_COST;
RUN;

/*------------------------------------------------------------------------------------------------------------------------
TEST 4: DISABILITY GROUP BREAKDOWN VALIDATION
-------------------------------------------------------------------------------------------------------------------------*/

TITLE "TEST 4: Primary Disability Analysis";

PROC SQL;
CREATE TABLE TEST4_DISABILITY_BREAKDOWN AS
SELECT 
    COALESCE(p.PRIMARY_DISABILITY, 'MISSING/NULL') AS PRIMARY_DISABILITY,
    COUNT(DISTINCT b.PARTICIPANT_KEY) AS UNIQUE_PARTICIPANTS,
    COUNT(b.PAYMENT_KEY) AS TOTAL_PAYMENTS,
    SUM(dp.SUPP_DEL_COST) AS TOTAL_COST,
    COUNT(DISTINCT b.PARTICIPANT_KEY) / (SELECT COUNT(DISTINCT PARTICIPANT_KEY) FROM WORK.PRV_BRIDGE&TEST_QTR.) * 100 AS PCT_PARTICIPANTS,
    COUNT(b.PAYMENT_KEY) / (SELECT COUNT(*) FROM WORK.PRV_BRIDGE&TEST_QTR.) * 100 AS PCT_PAYMENTS,
    SUM(dp.SUPP_DEL_COST) / (SELECT SUM(SUPP_DEL_COST) FROM WORK.PRV_DIM_PAYMENT&TEST_QTR.) * 100 AS PCT_COST
FROM WORK.PRV_BRIDGE&TEST_QTR. b
LEFT JOIN OUTPRVAP.ALL_PTC&TEST_QTR. p 
    ON b.PARTICIPANT_KEY = p.PARTICIPANT_KEY
LEFT JOIN WORK.PRV_DIM_PAYMENT&TEST_QTR. dp
    ON b.PAYMENT_KEY = dp.PAYMENT_KEY
GROUP BY CALCULATED PRIMARY_DISABILITY
ORDER BY TOTAL_COST DESC;
QUIT;

PROC PRINT DATA=TEST4_DISABILITY_BREAKDOWN;
    VAR PRIMARY_DISABILITY UNIQUE_PARTICIPANTS TOTAL_PAYMENTS TOTAL_COST PCT_PARTICIPANTS PCT_PAYMENTS PCT_COST;
    FORMAT PCT_PARTICIPANTS PCT_PAYMENTS PCT_COST 8.2;
    SUM UNIQUE_PARTICIPANTS TOTAL_PAYMENTS PCT_PARTICIPANTS PCT_PAYMENTS PCT_COST;
RUN;

/*------------------------------------------------------------------------------------------------------------------------
TEST 5: PROVIDER STATUS BREAKDOWN
-------------------------------------------------------------------------------------------------------------------------*/

TITLE "TEST 5: Provider Status Analysis";

PROC SQL;
CREATE TABLE TEST5_PROVIDER_BREAKDOWN AS
SELECT 
    COALESCE(pr.PRVDRSTS, 'MISSING/NULL') AS PROVIDER_STATUS,
    COUNT(DISTINCT b.PROVIDER_KEY) AS UNIQUE_PROVIDERS,
    COUNT(b.PAYMENT_KEY) AS TOTAL_PAYMENTS,
    SUM(dp.SUPP_DEL_COST) AS TOTAL_COST,
    COUNT(DISTINCT b.PROVIDER_KEY) / (SELECT COUNT(DISTINCT PROVIDER_KEY) FROM WORK.PRV_BRIDGE&TEST_QTR.) * 100 AS PCT_PROVIDERS,
    COUNT(b.PAYMENT_KEY) / (SELECT COUNT(*) FROM WORK.PRV_BRIDGE&TEST_QTR.) * 100 AS PCT_PAYMENTS,
    SUM(dp.SUPP_DEL_COST) / (SELECT SUM(SUPP_DEL_COST) FROM WORK.PRV_DIM_PAYMENT&TEST_QTR.) * 100 AS PCT_COST
FROM WORK.PRV_BRIDGE&TEST_QTR. b
LEFT JOIN OUTPRVAP.ALL_PRV&TEST_QTR. pr 
    ON b.PROVIDER_KEY = pr.PROVIDER_KEY
LEFT JOIN WORK.PRV_DIM_PAYMENT&TEST_QTR. dp
    ON b.PAYMENT_KEY = dp.PAYMENT_KEY
GROUP BY CALCULATED PROVIDER_STATUS
ORDER BY TOTAL_COST DESC;
QUIT;

PROC PRINT DATA=TEST5_PROVIDER_BREAKDOWN;
    VAR PROVIDER_STATUS UNIQUE_PROVIDERS TOTAL_PAYMENTS TOTAL_COST PCT_PROVIDERS PCT_PAYMENTS PCT_COST;
    FORMAT PCT_PROVIDERS PCT_PAYMENTS PCT_COST 8.2;
    SUM UNIQUE_PROVIDERS TOTAL_PAYMENTS PCT_PROVIDERS PCT_PAYMENTS PCT_COST;
RUN;

/*------------------------------------------------------------------------------------------------------------------------
TEST 6: SUPPORT CATEGORY BREAKDOWN
-------------------------------------------------------------------------------------------------------------------------*/

TITLE "TEST 6: Support Category Analysis";

PROC SQL;
CREATE TABLE TEST6_SUPPORT_BREAKDOWN AS
SELECT 
    COALESCE(dp.SUPPCLASSCD, 'MISSING/NULL') AS SUPPORT_CLASS,
    COALESCE(dp.SUPPCATCD, 'MISSING/NULL') AS SUPPORT_CATEGORY,
    COUNT(b.PAYMENT_KEY) AS TOTAL_PAYMENTS,
    COUNT(DISTINCT b.PARTICIPANT_KEY) AS UNIQUE_PARTICIPANTS,
    SUM(dp.SUPP_DEL_COST) AS TOTAL_COST,
    COUNT(b.PAYMENT_KEY) / (SELECT COUNT(*) FROM WORK.PRV_BRIDGE&TEST_QTR.) * 100 AS PCT_PAYMENTS,
    SUM(dp.SUPP_DEL_COST) / (SELECT SUM(SUPP_DEL_COST) FROM WORK.PRV_DIM_PAYMENT&TEST_QTR.) * 100 AS PCT_COST
FROM WORK.PRV_BRIDGE&TEST_QTR. b
LEFT JOIN WORK.PRV_DIM_PAYMENT&TEST_QTR. dp
    ON b.PAYMENT_KEY = dp.PAYMENT_KEY
GROUP BY CALCULATED SUPPORT_CLASS, CALCULATED SUPPORT_CATEGORY
ORDER BY TOTAL_COST DESC;
QUIT;

PROC PRINT DATA=TEST6_SUPPORT_BREAKDOWN (OBS=20);
    VAR SUPPORT_CLASS SUPPORT_CATEGORY TOTAL_PAYMENTS UNIQUE_PARTICIPANTS TOTAL_COST PCT_PAYMENTS PCT_COST;
    FORMAT PCT_PAYMENTS PCT_COST 8.2;
    TITLE2 "Top 20 Support Categories by Cost";
RUN;

/*------------------------------------------------------------------------------------------------------------------------
TEST 7: CROSS-DIMENSIONAL VALIDATION - Age vs Disability
-------------------------------------------------------------------------------------------------------------------------*/

TITLE "TEST 7: Cross-Dimensional Analysis - Age Group vs Primary Disability";

PROC SQL;
CREATE TABLE TEST7_CROSS_ANALYSIS AS
SELECT 
    COALESCE(p.AGE_GROUP, 'MISSING/NULL') AS AGE_GROUP,
    COALESCE(p.PRIMARY_DISABILITY, 'MISSING/NULL') AS PRIMARY_DISABILITY,
    COUNT(DISTINCT b.PARTICIPANT_KEY) AS UNIQUE_PARTICIPANTS,
    COUNT(b.PAYMENT_KEY) AS TOTAL_PAYMENTS,
    SUM(dp.SUPP_DEL_COST) AS TOTAL_COST,
    AVG(dp.SUPP_DEL_COST) AS AVG_PAYMENT_COST
FROM WORK.PRV_BRIDGE&TEST_QTR. b
LEFT JOIN OUTPRVAP.ALL_PTC&TEST_QTR. p 
    ON b.PARTICIPANT_KEY = p.PARTICIPANT_KEY
LEFT JOIN WORK.PRV_DIM_PAYMENT&TEST_QTR. dp
    ON b.PAYMENT_KEY = dp.PAYMENT_KEY
GROUP BY CALCULATED AGE_GROUP, CALCULATED PRIMARY_DISABILITY
ORDER BY CALCULATED AGE_GROUP, TOTAL_COST DESC;
QUIT;

PROC PRINT DATA=TEST7_CROSS_ANALYSIS;
    VAR AGE_GROUP PRIMARY_DISABILITY UNIQUE_PARTICIPANTS TOTAL_PAYMENTS TOTAL_COST AVG_PAYMENT_COST;
    FORMAT TOTAL_COST AVG_PAYMENT_COST DOLLAR12.2;
RUN;

/*------------------------------------------------------------------------------------------------------------------------
TEST 8: DATA QUALITY SUMMARY REPORT
-------------------------------------------------------------------------------------------------------------------------*/

TITLE "TEST 8: Data Quality Summary";

PROC SQL;
CREATE TABLE TEST8_QUALITY_SUMMARY AS
/* Overall metrics */
SELECT 
    'TOTAL_RECORDS' AS METRIC,
    COUNT(*) AS VALUE,
    '' AS PERCENTAGE
FROM WORK.PRV_BRIDGE&TEST_QTR.

UNION ALL

SELECT 
    'RECORDS_WITH_PARTICIPANT_DATA' AS METRIC,
    COUNT(*) AS VALUE,
    PUT(COUNT(*) / (SELECT COUNT(*) FROM WORK.PRV_BRIDGE&TEST_QTR.) * 100, 8.2) AS PERCENTAGE
FROM WORK.PRV_BRIDGE&TEST_QTR. b
INNER JOIN OUTPRVAP.ALL_PTC&TEST_QTR. p ON b.PARTICIPANT_KEY = p.PARTICIPANT_KEY

UNION ALL

SELECT 
    'RECORDS_WITH_PROVIDER_DATA' AS METRIC,
    COUNT(*) AS VALUE,
    PUT(COUNT(*) / (SELECT COUNT(*) FROM WORK.PRV_BRIDGE&TEST_QTR.) * 100, 8.2) AS PERCENTAGE
FROM WORK.PRV_BRIDGE&TEST_QTR. b
INNER JOIN OUTPRVAP.ALL_PRV&TEST_QTR. pr ON b.PROVIDER_KEY = pr.PROVIDER_KEY

UNION ALL

SELECT 
    'RECORDS_WITH_AGE_GROUP' AS METRIC,
    COUNT(*) AS VALUE,
    PUT(COUNT(*) / (SELECT COUNT(*) FROM WORK.PRV_BRIDGE&TEST_QTR.) * 100, 8.2) AS PERCENTAGE
FROM WORK.PRV_BRIDGE&TEST_QTR. b
INNER JOIN OUTPRVAP.ALL_PTC&TEST_QTR. p ON b.PARTICIPANT_KEY = p.PARTICIPANT_KEY
WHERE p.AGE_GROUP IS NOT NULL AND p.AGE_GROUP NE ''

UNION ALL

SELECT 
    'RECORDS_WITH_DISABILITY_INFO' AS METRIC,
    COUNT(*) AS VALUE,
    PUT(COUNT(*) / (SELECT COUNT(*) FROM WORK.PRV_BRIDGE&TEST_QTR.) * 100, 8.2) AS PERCENTAGE
FROM WORK.PRV_BRIDGE&TEST_QTR. b
INNER JOIN OUTPRVAP.ALL_PTC&TEST_QTR. p ON b.PARTICIPANT_KEY = p.PARTICIPANT_KEY
WHERE p.PRIMARY_DISABILITY IS NOT NULL AND p.PRIMARY_DISABILITY NE '';
QUIT;

PROC PRINT DATA=TEST8_QUALITY_SUMMARY;
    VAR METRIC VALUE PERCENTAGE;
RUN;

/*------------------------------------------------------------------------------------------------------------------------
TEST 9: PERCENTAGE VALIDATION - Check if all percentages add to 100%
-------------------------------------------------------------------------------------------------------------------------*/

TITLE "TEST 9: Percentage Validation Check";

/* Create a summary of percentage totals */
PROC SQL;
CREATE TABLE TEST9_PERCENTAGE_CHECK AS
SELECT 
    'AGE_GROUP_PARTICIPANTS' AS BREAKDOWN_TYPE,
    SUM(PCT_PARTICIPANTS) AS TOTAL_PERCENTAGE
FROM TEST3_AGE_BREAKDOWN
WHERE AGE_GROUP NE 'MISSING/NULL'

UNION ALL

SELECT 
    'AGE_GROUP_PAYMENTS' AS BREAKDOWN_TYPE,
    SUM(PCT_PAYMENTS) AS TOTAL_PERCENTAGE
FROM TEST3_AGE_BREAKDOWN
WHERE AGE_GROUP NE 'MISSING/NULL'

UNION ALL

SELECT 
    'AGE_GROUP_INCLUDING_MISSING' AS BREAKDOWN_TYPE,
    SUM(PCT_PARTICIPANTS) AS TOTAL_PERCENTAGE
FROM TEST3_AGE_BREAKDOWN

UNION ALL

SELECT 
    'DISABILITY_PARTICIPANTS' AS BREAKDOWN_TYPE,
    SUM(PCT_PARTICIPANTS) AS TOTAL_PERCENTAGE
FROM TEST4_DISABILITY_BREAKDOWN
WHERE PRIMARY_DISABILITY NE 'MISSING/NULL'

UNION ALL

SELECT 
    'DISABILITY_INCLUDING_MISSING' AS BREAKDOWN_TYPE,
    SUM(PCT_PARTICIPANTS) AS TOTAL_PERCENTAGE
FROM TEST4_DISABILITY_BREAKDOWN;
QUIT;

PROC PRINT DATA=TEST9_PERCENTAGE_CHECK;
    VAR BREAKDOWN_TYPE TOTAL_PERCENTAGE;
    FORMAT TOTAL_PERCENTAGE 8.2;
RUN;

/*------------------------------------------------------------------------------------------------------------------------
OUTPUT SUMMARY: Export key findings for Qlik validation
-------------------------------------------------------------------------------------------------------------------------*/

/* Export age breakdown for comparison with Qlik */
PROC EXPORT 
    DATA=TEST3_AGE_BREAKDOWN
    OUTFILE="\\prntxnas001\sasstorage\NDISMarketdata\Projects\Qlik\Provider App\Data Model Files\VALIDATION_AGE_BREAKDOWN&TEST_QTR..CSV"
    DBMS=CSV REPLACE;
RUN;

/* Export quality summary */
PROC EXPORT 
    DATA=TEST8_QUALITY_SUMMARY
    OUTFILE="\\prntxnas001\sasstorage\NDISMarketdata\Projects\Qlik\Provider App\Data Model Files\VALIDATION_QUALITY_SUMMARY&TEST_QTR..CSV"
    DBMS=CSV REPLACE;
RUN;

/* Export percentage validation */
PROC EXPORT 
    DATA=TEST9_PERCENTAGE_CHECK
    OUTFILE="\\prntxnas001\sasstorage\NDISMarketdata\Projects\Qlik\Provider App\Data Model Files\VALIDATION_PERCENTAGE_CHECK&TEST_QTR..CSV"
    DBMS=CSV REPLACE;
RUN;
